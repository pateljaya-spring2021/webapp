name: On Push - Build and Deploy WebApp
on: 
  push:
    branches:
      - 'master'
  pull_request:

  workflow_dispatch:

jobs:
  run-unit-test:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    
          
    env:
     
      DB_USERNAME: root
      DB_PASSWORD: root1234
      DB_DATABASE: cloud_webapp
      DB_HOST: 127.0.0.1
      DB_DIALECT: mysql
      
    container:
      image: node:14.5.0-alpine
    services:
      mysql-master:
        image: mysql:5.7
        ports:
          - 3306/tcp
        env:
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_USER: ${{ env.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_Db_HOST: ${{ env.DB_HOST }}
          MYSQL_DB_DIALECT: ${{ env.DB_DIALECT }}
 
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: "npm install"
      - name: Install Sequelize
        run: "sudo npm install -g sequelize-cli"
      - name: Setup Database
        run: "sequelize db:migrate"
      - name: Run Tests
        run: "npm test"
        
  build-webapp:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    env:

      ARTIFACT_NAME: csye6225-webapp-${{ github.sha }}.zip
      CODEDEPLOY_APPLICATION_NAME: csye6225-webapp
      CODEDEPLOY_GROUP_NAME: csye6225-webapp-deployment
      AWS_REGION: us-east-1
 
    strategy:
      matrix:
        node-version: [14.x]

    steps:

    - uses: actions/checkout@v2

    - name: Install awscli
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

 

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y wget zip unzip jq
  
    - name: Built Deployment Artifacts
      run: |
      
        mkdir codedeploy_artifact
        cp webapp/amazon-cloudwatch-agent.json .
        zip -r ${{ env.ARTIFACT_NAME }} webapp codedeploy_scripts/*.sh appspec.yml --exclude webapp/.env
        pwd
        ls -al
        mv ${{ env.ARTIFACT_NAME }} codedeploy_artifact
        cd codedeploy_artifact
        pwd
        ls -al
        cd ..
        pwd
        ls -al
    - name: Configuring AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload Artifact Zip to S3
      run: |
        aws s3 sync ./codedeploy_artifact s3://${{ secrets.CODEDEPLOY_BUCKET }}
    - name: Make CodeDeploy API call
      run: |
        echo $(aws deploy create-deployment \
        --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name ${{ env.CODEDEPLOY_GROUP_NAME }} \
        --s3-location bucket=${{ secrets.CODEDEPLOY_BUCKET }},bundleType=zip,key=${{ env.ARTIFACT_NAME }} \
        --region ${{ env.AWS_REGION }} \
        --output json) > deployment_id.txt
        ls -al
        deployId=$(jq --raw-output '.deploymentId' deployment_id.txt)
        aws deploy wait deployment-successful --deployment-id $deployId
        
